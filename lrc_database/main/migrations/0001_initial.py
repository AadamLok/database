# Generated by Django 4.1.5 on 2023-03-15 02:47

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.custom_validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='LRCDatabaseUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(max_length=100, verbose_name='last name')),
                ('email', models.EmailField(max_length=100, verbose_name='email')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(help_text='Department string, like COMPSCI or MATH.', max_length=16)),
                ('number', models.CharField(help_text='Course number, like the 198C in COMPSCI 198C.', max_length=10, validators=[main.custom_validators.validate_course_number])),
                ('name', models.CharField(help_text='The human-legible name of the course, like "Programming with Data Structures."', max_length=64)),
            ],
            options={
                'ordering': ('department', 'number'),
            },
        ),
        migrations.CreateModel(
            name='FullCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('faculty', models.CharField(help_text='Name of the faculty Member.', max_length=100)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='full_course_course_number', to='main.course', verbose_name='Course Code')),
            ],
            options={
                'ordering': ('semester', 'course', 'faculty'),
            },
        ),
        migrations.CreateModel(
            name='Hardware',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('is_available', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'hardware',
            },
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('name', models.CharField(help_text="Name of the semester. like 'SPRING 2023'", max_length=15, primary_key=True, serialize=False, unique=True)),
                ('start_date', models.DateField(help_text="Classes start date. All the shifts of kind 'class' will be automatically created starting from this date.")),
                ('end_date', models.DateField(help_text='Classes end date. All the automatically created shifts from the semester will end on this date.')),
                ('active', models.BooleanField(help_text='Is this the currently active semester?')),
            ],
        ),
        migrations.CreateModel(
            name='Shift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(help_text='The time that the shift starts.')),
                ('duration', models.DurationField(help_text='How long the shift will last, in HH:MM:SS format.')),
                ('location', models.CharField(help_text='The location where the shift will be occur, e.g. GSMN 64.', max_length=32)),
                ('kind', models.CharField(choices=[('SI', 'SI'), ('Tutoring', 'Tutoring'), ('Training', 'Training'), ('Observation', 'Observation'), ('Class', 'Class'), ('SI-Preparation', 'SI-Preparation')], help_text='The kind of shift this is: tutoring, SI, Training, Class, or Observation.', max_length=14)),
                ('attended', models.BooleanField(default=False)),
                ('signed', models.BooleanField(default=False)),
                ('reason', models.CharField(blank=True, help_text='Reason, if you were not able to attend your shift.', max_length=500, null=True)),
                ('late', models.BooleanField(default=False)),
                ('late_datetime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('start',),
            },
        ),
        migrations.CreateModel(
            name='StaffUserPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(choices=[('SI', 'SI'), ('Tutor', 'Tutor'), ('PM', 'PM')], max_length=5)),
                ('hourly_rate', models.DecimalField(decimal_places=2, help_text='Hourly rate for this position for this person.', max_digits=6)),
                ('peers', models.ManyToManyField(blank=True, default=None, related_name='pm_staff_peers', to=settings.AUTH_USER_MODEL)),
                ('person', models.ForeignKey(help_text='The person whome you want to assign a position.', on_delete=django.db.models.deletion.CASCADE, related_name='staff_for_user_position', to=settings.AUTH_USER_MODEL)),
                ('semester', models.ForeignKey(help_text='Semester for which you are assigning this position.', on_delete=django.db.models.deletion.CASCADE, to='main.semester')),
                ('si_course', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lrc_database_user_si_course', to='main.fullcourse', verbose_name='SI course')),
                ('tutor_courses', models.ManyToManyField(blank=True, default=None, to='main.course')),
            ],
            options={
                'unique_together': {('person', 'semester', 'position', 'si_course')},
            },
        ),
        migrations.CreateModel(
            name='ShiftChangeRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(help_text='Explanation for why this new shift or shift change is being requested.', max_length=512)),
                ('state', models.CharField(choices=[('Approved', 'Approved'), ('Pending', 'Pending'), ('Not Approved', 'Not Approved'), ('New', 'New')], help_text='The kind of shift this is.', max_length=40)),
                ('is_drop_request', models.BooleanField(default=False)),
                ('new_start', models.DateTimeField(blank=True, default=None, help_text='The date time that the shift starts if this request is approved.', null=True)),
                ('new_duration', models.DurationField(blank=True, default=None, help_text='How long the shift will last, in HH:MM:SS format, if this request is approved.', null=True)),
                ('new_location', models.CharField(blank=True, default=None, help_text='The location where this shift will occur, e.g. GSMN 64, if this request is approved.', max_length=32, null=True)),
                ('new_kind', models.CharField(blank=True, choices=[('SI', 'SI'), ('Tutoring', 'Tutoring'), ('Training', 'Training'), ('Observation', 'Observation'), ('Class', 'Class'), ('SI-Preparation', 'SI-Preparation')], default=None, help_text='The kind of shift this is: tutoring or SI.', max_length=14, null=True)),
                ('new_position', models.ForeignKey(blank=True, default=None, help_text='The position that this shit is associated with this work shift.', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.staffuserposition')),
                ('shift_to_update', models.ForeignKey(blank=True, default=None, help_text='Shift to edit. If none, this change request will create a new shift when approved.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shift_change_request_target', to='main.shift')),
            ],
            options={
                'ordering': ('new_start',),
            },
        ),
        migrations.AddField(
            model_name='shift',
            name='position',
            field=models.ForeignKey(help_text='Which user and their possition is this shift for?', on_delete=django.db.models.deletion.CASCADE, to='main.staffuserposition'),
        ),
        migrations.CreateModel(
            name='Loan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(help_text='DD/MM/YYYY HH:MM')),
                ('return_time', models.DateTimeField(blank=True, default=None, help_text='DD/MM/YYYY HH:MM', null=True)),
                ('hardware_user', models.ForeignKey(help_text='LRC USER', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('target', models.ForeignKey(help_text='REQUESTED HARDWARE', on_delete=django.db.models.deletion.CASCADE, related_name='intended_hardware_to_borrow', to='main.hardware')),
            ],
        ),
        migrations.CreateModel(
            name='Holidays',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date of holiday. All the shift on this date will be automatically deleted.', unique=True)),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.semester')),
            ],
        ),
        migrations.AddField(
            model_name='fullcourse',
            name='semester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.semester'),
        ),
        migrations.CreateModel(
            name='DaySwitch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_switch', models.DateField(help_text='Date on which university is following some other days schedule.', unique=True)),
                ('day_to_follow', models.PositiveSmallIntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thurday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.semester')),
            ],
        ),
        migrations.CreateModel(
            name='ClassDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(help_text='The location where the class will occur, e.g. GSMN 64.', max_length=32)),
                ('class_day', models.PositiveSmallIntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thurday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of the class.')),
                ('class_time', models.TimeField(help_text='Time of the class.')),
                ('class_duration', models.DurationField(help_text='How long the class will last.')),
                ('full_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.fullcourse')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='fullcourse',
            unique_together={('semester', 'course', 'faculty')},
        ),
    ]
